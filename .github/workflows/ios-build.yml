name: Build & Deploy iOS

on:
  push:
    branches:
      - main  # Ex√©cute l‚Äôaction √† chaque push sur la branche main

jobs:
  build:
    runs-on: macos-latest  # Utilisation d'un environnement macOS g

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.27.3  # Mets ta version de Flutter ici
          cache: true

      - name: Install dependencies
        run: flutter pub get
      
      - name: Enable iOS support
        run: flutter config --enable-ios

      - name: Force iOS 13+ in Podfiles
        run: |
          cd ios
          sed -i -e 's/^# *platform :ios, .*/platform :ios, "14.0"/' Podfile || echo 'platform :ios, "14.0"' >> Podfile
          cat Podfile  # Affiche le fichier Podfile pour v√©rification
          cd ..


      - name: Set up Xcode tools
        run: |
          sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
          sudo xcodebuild -license accept
        
      - name: Reset Xcode Signing Settings
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/MobileDevice/Provisioning\ Profiles/*
          echo "‚úÖ Reset Xcode derived data and provisioning profiles"

      - name: Import certificate
        env:
          CERTIFICATE_P12: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        run: |
          echo "${{ secrets.IOS_CERTIFICATE_BASE64 }}" | base64 --decode > certificate.p12
          file certificate.p12  # V√©rifier que c'est bien un fichier P12
          
          # Cr√©er et configurer le keychain
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          
          # Importer le certificat avec debug activ√©
          security import certificate.p12 -k build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -A -T /usr/bin/codesign -T /usr/bin/security || cat certificate.p12
          
          # Lister les certificats pour v√©rifier l'importation
          security list-keychains -s build.keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
  
  
      

      - name: D√©crypter et v√©rifier le Provisioning Profile
        env:
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        run: |
              echo "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > provisioning.mobileprovision
              ls -la  # V√©rifie si le fichier est bien cr√©√©
              file provisioning.mobileprovision  # V√©rifie son type
    
      - name: Copier le Provisioning Profile dans Xcode
        run: |
              mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
              cp provisioning.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
              echo "‚úÖ Provisioning profile copied successfully!"

      
      - name: Verify Installed Provisioning Profiles
        run: |
            echo "üîç Listing all provisioning profiles..."
            ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
            for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
              echo "üîç Checking profile: $profile"
              security cms -D -i "$profile" | plutil -extract Name xml1 -o - - | sed 's/<string>//g' | sed 's/<\/string>//g' | tr -d ' '
              security cms -D -i "$profile" | plutil -extract TeamIdentifier xml1 -o - - | grep -A 1 "<array>" | tail -n 1
            done


      - name: Set Correct Provisioning Profile Name and UUID
        run: |
              PROFILE_PATH=$(ls ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | head -n 1)
              
              PROFILE_NAME=$(security cms -D -i "$PROFILE_PATH" | grep -A1 '<key>Name</key>' | tail -n 1 | sed 's/<string>//g' | sed 's/<\/string>//g' | tr -d ' ')
              
              PROFILE_UUID=$(security cms -D -i "$PROFILE_PATH" | grep -A1 '<key>UUID</key>' | tail -n 1 | sed 's/<string>//g' | sed 's/<\/string>//g' | tr -d ' ')
          
              echo "‚úÖ Using provisioning profile: $PROFILE_NAME (UUID: $PROFILE_UUID)"
              echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV
              echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          
      - name: Inject Provisioning Profile into Xcode Project
        run: |
          sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = "[^"]*"/PROVISIONING_PROFILE_SPECIFIER = "$(PROFILE_NAME)"/g' ios/Runner.xcodeproj/project.pbxproj
          sed -i '' 's/PROVISIONING_PROFILE = "[^"]*"/PROVISIONING_PROFILE = "$(PROFILE_UUID)"/g' ios/Runner.xcodeproj/project.pbxproj
          sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' ios/Runner.xcodeproj/project.pbxproj
          echo "‚úÖ Updated project.pbxproj with correct provisioning profile and manual signing"
        
          
      
      - name: Verify Code Signing Identity
        run: security find-identity -v -p codesigning


      - name: Apply Correct Provisioning Profile in Xcode
        run: |
          xcodebuild clean -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release
          xcodebuild -project ios/Runner.xcodeproj \
            -scheme Runner \
            -destination 'generic/platform=iOS' \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=9PW89SQJ4U \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
            PROVISIONING_PROFILE="$PROFILE_UUID"


      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod init || true
          pod repo update
          pod install --verbose
          cd ..

      - name: Create Firebase Service Account JSON
        run: |
            mkdir -p assets/credentials
            echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}' > assets/credentials/service_account_key.json
      
      # - name: Install Xcode Command Line Tools
      #   run: |
      #     sudo xcode-select --install || echo "Xcode command line tools already installed"
      
      # - name: Set Development Team and Profile in Xcode
      #   run: |
      #       PROFILE_NAME=$(ls ~/Library/MobileDevice/Provisioning\ Profiles/ | head -n 1 | sed 's/.mobileprovision//')
      #       echo "Using provisioning profile: $PROFILE_NAME"
        
      #       xcodebuild -project ios/Runner.xcodeproj \
      #         -scheme Runner \
      #         -destination 'generic/platform=iOS' \
      #         DEVELOPMENT_TEAM=9PW89SQJ4U \
      #         CODE_SIGN_STYLE=Manual \
      #         PROVISIONING_PROFILE="$PROFILE_NAME"
        
      #       echo "‚úÖ Xcode Team ID et signature configur√©s !"
        


      - name: Build iOS
        run: flutter build ipa --release

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iOS-Build
          path: build/ios/ipa/
