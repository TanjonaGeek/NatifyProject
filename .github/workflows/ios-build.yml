name: Build & Deploy iOS

on:
  push:
    branches:
      - main  # Ex√©cute l‚Äôaction √† chaque push sur la branche main

jobs:
  build:
    runs-on: macos-latest  # Utilisation d'un environnement macOS g

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.27.3  # Mets ta version de Flutter ici
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Force iOS 13+ in Podfiles
        run: |
          cd ios
          sed -i -e 's/^# *platform :ios, .*/platform :ios, "14.0"/' Podfile || echo 'platform :ios, "14.0"' >> Podfile
          cat Podfile  # Affiche le fichier Podfile pour v√©rification
          cd ..

      - name: Import certificate
        run: |
          echo "${{ secrets.IOS_CERTIFICATE_BASE64 }}" | base64 --decode > certificate.p12
          file certificate.p12  # V√©rifier que c'est bien un fichier P12
          
          # Cr√©er et configurer le keychain
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          
          # Importer le certificat avec debug activ√©
          security import certificate.p12 -k build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -A -T /usr/bin/codesign -T /usr/bin/security || cat certificate.p12
          
          # Lister les certificats pour v√©rifier l'importation
          security list-keychains -s build.keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
  
  
      

      - name: D√©crypter et v√©rifier le Provisioning Profile
        run: |
              echo "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > provisioning.mobileprovision
              ls -la  # V√©rifie si le fichier est bien cr√©√©
              file provisioning.mobileprovision  # V√©rifie son type
    
      - name: Copier le Provisioning Profile dans Xcode
        run: |
              mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
              cp provisioning.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
              echo "‚úÖ Provisioning profile copied successfully!"
          
      - name: List Installed Provisioning Profiles
        run: |
          echo "üìÇ Liste des fichiers dans ~/Library/MobileDevice/Provisioning Profiles/"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
      
          echo "üîç D√©tails du provisioning profile"
          security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | grep -A2 '<key>UUID</key>'
      
      - name: Debug Provisioning Profile Certificate
        run: |
          security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | grep -A5 '<key>DeveloperCertificates</key>'
      

      - name: Check Installed Certificates
        run: |
          echo "üîç V√©rification des certificats install√©s"
          security find-identity -v -p codesigning
      
      - name: Extract Installed Certificate Fingerprint
        run: |
          security find-certificate -a -p | openssl x509 -inform PEM -noout -fingerprint -sha1


      - name: Extract Provisioning Profile Certificate Fingerprint
        run: |
            security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | \
            awk -F '[<>]' '/<key>DeveloperCertificates<\/key>/ {getline; print $3}' | base64 --decode | \
            openssl x509 -inform DER -noout -fingerprint -sha1
        
        
          
      - name: Set Development Team and Profile in Xcode
        run: |
          echo "üîç Utilisation du Provisioning Profile UUID : 7d0550e1-9670-47a2-b6b4-e9ae067af02a"
      
          xcodebuild -project ios/Runner.xcodeproj \
            -scheme Runner \
            -destination 'generic/platform=iOS' \
            DEVELOPMENT_TEAM=9PW89SQJ4U \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE=7d0550e1-9670-47a2-b6b4-e9ae067af02a
      
          echo "‚úÖ Xcode Team ID et signature configur√©s avec succ√®s !"
        
        
      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod init || true
          pod repo update
          pod install --verbose
          cd ..

      - name: Create Firebase Service Account JSON
        run: |
            mkdir -p assets/credentials
            echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}' > assets/credentials/service_account_key.json
      
      # - name: Install Xcode Command Line Tools
      #   run: |
      #     sudo xcode-select --install || echo "Xcode command line tools already installed"
      
      # - name: Set Development Team and Profile in Xcode
      #   run: |
      #       PROFILE_NAME=$(ls ~/Library/MobileDevice/Provisioning\ Profiles/ | head -n 1 | sed 's/.mobileprovision//')
      #       echo "Using provisioning profile: $PROFILE_NAME"
        
      #       xcodebuild -project ios/Runner.xcodeproj \
      #         -scheme Runner \
      #         -destination 'generic/platform=iOS' \
      #         DEVELOPMENT_TEAM=9PW89SQJ4U \
      #         CODE_SIGN_STYLE=Manual \
      #         PROVISIONING_PROFILE="$PROFILE_NAME"
        
      #       echo "‚úÖ Xcode Team ID et signature configur√©s !"
        


      - name: Build iOS
        run: flutter build ipa --release

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iOS-Build
          path: build/ios/ipa/
