name: Build & Deploy iOS

on:
  push:
    branches:
      - main  # Exécute l’action à chaque push sur la branche main

jobs:
  build:
    runs-on: macos-latest  # Utilisation d'un environnement macOS g

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.27.3  # Mets ta version de Flutter ici
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Force iOS 13+ in Podfiles
        run: |
          cd ios
          sed -i -e 's/^# *platform :ios, .*/platform :ios, "14.0"/' Podfile || echo 'platform :ios, "14.0"' >> Podfile
          cat Podfile  # Affiche le fichier Podfile pour vérification
          cd ..


      - name: Set up Xcode tools
        run: |
          sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
          sudo xcodebuild -license accept

      - name: Set up certificates and provisioning profiles
        env:
          CERTIFICATE_P12: secrets.IOS_CERTIFICATE_BASE64
          CERTIFICATE_PASSWORD: secrets.IOS_CERTIFICATE_PASSWORD
          TEAM_ID: 9PW89SQJ4U  # Utiliser le secret pour le Team ID
        run: |
          # Crée un répertoire pour les certificats et profils
          # mkdir -p ~/certs

      - name: Set Team ID in Xcode project
        run: |
          # Met à jour le fichier .xcodeproj pour inclure le Team ID automatiquement
          sed -i ” "s/DEVELOPMENT_TEAM = ;/DEVELOPMENT_TEAM =9PW89SQJ4U;/" ios/Runner.xcodeproj/project.pbxproj

      - name: Import certificate
        run: |
          echo "${{ secrets.IOS_CERTIFICATE_BASE64 }}" | base64 --decode > certificate.p12
          file certificate.p12  # Vérifier que c'est bien un fichier P12
          
          # Créer et configurer le keychain
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          
          # Importer le certificat avec debug activé
          security import certificate.p12 -k build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -A -T /usr/bin/codesign -T /usr/bin/security || cat certificate.p12
          
          # Lister les certificats pour vérifier l'importation
          security list-keychains -s build.keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
  
  
      

      - name: Décrypter et vérifier le Provisioning Profile
        run: |
              echo "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > provisioning.mobileprovision
              ls -la  # Vérifie si le fichier est bien créé
              file provisioning.mobileprovision  # Vérifie son type
    
      - name: Copier le Provisioning Profile dans Xcode
        run: |
              mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
              cp provisioning.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
              echo "✅ Provisioning profile copied successfully!"
 
      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod init || true
          pod repo update
          pod install --verbose
          cd ..

      - name: Create Firebase Service Account JSON
        run: |
            mkdir -p assets/credentials
            echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}' > assets/credentials/service_account_key.json
      
      # - name: Install Xcode Command Line Tools
      #   run: |
      #     sudo xcode-select --install || echo "Xcode command line tools already installed"
      
      # - name: Set Development Team and Profile in Xcode
      #   run: |
      #       PROFILE_NAME=$(ls ~/Library/MobileDevice/Provisioning\ Profiles/ | head -n 1 | sed 's/.mobileprovision//')
      #       echo "Using provisioning profile: $PROFILE_NAME"
        
      #       xcodebuild -project ios/Runner.xcodeproj \
      #         -scheme Runner \
      #         -destination 'generic/platform=iOS' \
      #         DEVELOPMENT_TEAM=9PW89SQJ4U \
      #         CODE_SIGN_STYLE=Manual \
      #         PROVISIONING_PROFILE="$PROFILE_NAME"
        
      #       echo "✅ Xcode Team ID et signature configurés !"
        


      - name: Build iOS
        run: flutter build ipa --release

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iOS-Build
          path: build/ios/ipa/
