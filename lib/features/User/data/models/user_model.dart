import 'package:natify/features/User/domaine/entities/user_entities.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class UserModel extends UserEntity {
  const UserModel({
    super.name,
    super.nameParts,
    super.nom,
    super.prenom,
    super.uid,
    super.flag,
    super.pays,
    super.nationalite,
    super.codeCountry,
    super.profilePic,
    super.isOnline,
    super.groupId,
    super.tokenNotification,
    super.age,
    super.sexe,
    super.bio,
    super.situationamoureux,
    super.universite,
    super.college,
    super.emploi,
    super.LastActivetime,
    super.ageReel,
    super.abonnee,
    super.abonnement,
    super.invitation,
    super.friendBlocked,
    super.position,
    bool? hiddenPosition,
    bool? alertLocation,
    bool? alertPublication,
    bool? partageMedia,
    super.availableSendNotification,
  }) : super(
            hiddenPosition: hiddenPosition ?? false,
            alertLocation: alertLocation ?? false,
            alertPublication: alertPublication ?? true,
            partageMedia: partageMedia ?? true);

  factory UserModel.fromJson(Map<String, dynamic> map) {
    return UserModel(
      name: map['name'] ?? '',
      nameParts: List<String>.from(map['nameParts']),
      nom: map['nom'] ?? '',
      prenom: map['prenom'] ?? '',
      flag: map['flag'] ?? '',
      pays: map['pays'] ?? '',
      nationalite: map['nationalite'] ?? '',
      codeCountry: map['codeCountry'] ?? '',
      uid: map['uid'] ?? '',
      profilePic: map['profilePic'] ?? '',
      isOnline: map['isOnline'] ?? false,
      groupId: List<String>.from(map['groupId']),
      tokenNotification: map['tokenNotification'] ?? '',
      age: List<Map<String, dynamic>>.from(map['age']),
      sexe: map['sexe'] ?? '',
      bio: map['bio'] ?? '',
      situationamoureux:
          List<Map<String, dynamic>>.from(map['situationamoureux']),
      universite: List<Map<String, dynamic>>.from(map['universite']),
      college: List<Map<String, dynamic>>.from(map['college']),
      emploi: List<Map<String, dynamic>>.from(map['emploi']),
      LastActivetime: map['LastActivetime'] ?? '',
      ageReel: map['ageReel'] ?? 0,
      abonnee: List<String>.from(map['abonnee']),
      abonnement: List<String>.from(map['abonnement']),
      invitation: List<String>.from(map['invitation']),
      friendBlocked: List<String>.from(map['friendBlocked']),
      position: map['position'] is GeoPoint ? map['position'] : null,
      hiddenPosition: map['hiddenPosition'] ?? false,
      alertLocation: map['alertLocation'] ?? false,
      alertPublication: map['alertPublication'] ?? true,
      partageMedia: map['partageMedia'] ?? true,
      availableSendNotification:
          List<String>.from(map['availableSendNotification']),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'nameParts': nameParts,
      'nom': nom,
      'prenom': prenom,
      'flag': flag,
      'pays': pays,
      'nationalite': nationalite,
      'codeCountry': codeCountry,
      'uid': uid,
      'profilePic': profilePic,
      'isOnline': isOnline,
      'groupId': groupId,
      'tokenNotification': tokenNotification,
      'age': age,
      'sexe': sexe,
      'bio': bio,
      'situationamoureux': situationamoureux,
      'universite': universite,
      'college': college,
      'emploi': emploi,
      'LastActivetime': LastActivetime,
      'ageReel': ageReel,
      'abonnee': abonnee,
      'abonnement': abonnement,
      'invitation': invitation,
      'friendBlocked': friendBlocked,
      'position': position,
      'hiddenPosition': hiddenPosition,
      'alertLocation': alertLocation,
      'alertPublication': alertPublication,
      'partageMedia': partageMedia,
      "availableSendNotification": availableSendNotification
    };
  }

  factory UserModel.fromDocument(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    return UserModel(
      name: data['name'],
      nameParts: data['nameParts'],
      nom: data['nom'],
      prenom: data['prenom'],
      uid: data['uid'],
      flag: data['flag'],
      pays: data['pays'],
      nationalite: data['nationalite'],
      codeCountry: data['codeCountry'],
      profilePic: data['profilePic'],
      isOnline: data['isOnline'],
      groupId: data['groupId'],
      tokenNotification: data['tokenNotification'],
      age: data['age'],
      sexe: data['sexe'],
      bio: data['bio'],
      situationamoureux: data['situationamoureux'],
      universite: data['universite'],
      college: data['college'],
      emploi: data['emploi'],
      LastActivetime: data['LastActivetime'],
      ageReel: data['ageReel'],
      abonnee: data['abonnee'],
      abonnement: data['abonnement'],
      invitation: data['invitation'],
      friendBlocked: data['friendBlocked'],
      position: data['position'] is GeoPoint ? data['position'] : null,
      hiddenPosition: data['hiddenPosition'],
      alertLocation: data['alertLocation'],
      alertPublication: data['alertPublication'],
      partageMedia: data['partageMedia'],
      availableSendNotification: data['availableSendNotification'],
    );
  }

  factory UserModel.fromEntity(UserEntity entity) {
    return UserModel(
        name: entity.name,
        nameParts: entity.nameParts,
        nom: entity.nom,
        prenom: entity.prenom,
        uid: entity.uid,
        flag: entity.flag,
        pays: entity.pays,
        nationalite: entity.nationalite,
        codeCountry: entity.codeCountry,
        profilePic: entity.profilePic,
        isOnline: entity.isOnline,
        groupId: entity.groupId,
        tokenNotification: entity.tokenNotification,
        age: entity.age,
        sexe: entity.sexe,
        bio: entity.bio,
        situationamoureux: entity.situationamoureux,
        universite: entity.universite,
        college: entity.college,
        emploi: entity.emploi,
        LastActivetime: entity.LastActivetime,
        ageReel: entity.ageReel,
        abonnee: entity.abonnee,
        abonnement: entity.abonnement,
        invitation: entity.invitation,
        friendBlocked: entity.friendBlocked,
        position: entity.position,
        hiddenPosition: entity.hiddenPosition,
        alertLocation: entity.alertLocation,
        alertPublication: entity.alertPublication,
        partageMedia: entity.partageMedia,
        availableSendNotification: entity.availableSendNotification);
  }

  UserEntity toEntity() {
    return UserEntity(
        name: name,
        nameParts: nameParts,
        nom: nom,
        prenom: prenom,
        uid: uid,
        flag: flag,
        pays: pays,
        nationalite: nationalite,
        codeCountry: codeCountry,
        profilePic: profilePic,
        isOnline: isOnline,
        groupId: groupId,
        tokenNotification: tokenNotification,
        age: age,
        sexe: sexe,
        bio: bio,
        situationamoureux: situationamoureux,
        universite: universite,
        college: college,
        emploi: emploi,
        LastActivetime: LastActivetime,
        ageReel: ageReel,
        abonnee: abonnee,
        abonnement: abonnement,
        invitation: invitation,
        friendBlocked: friendBlocked,
        position: position,
        hiddenPosition: hiddenPosition,
        alertLocation: alertLocation,
        alertPublication: alertPublication,
        partageMedia: partageMedia,
        availableSendNotification: availableSendNotification);
  }
}
